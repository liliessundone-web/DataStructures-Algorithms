Time Complexity: O(n* log k) where n: number of elements
Space Complexity: O(k)= size of minheap


class Solution {
  public:
    vector<int> kthLargest(int k, int arr[], int n) {
        vector<int> ans;
        priority_queue<int, vector<int>, greater<int>> minhp;  
        
        for (int i = 0; i < n; i++) 
        {
            minhp.push(arr[i]);  
            
            if (minhp.size() < k) 
            {
                ans.push_back(-1);   
            } 
            
            else if (minhp.size() == k) 
            {
                ans.push_back(minhp.top());  
            }
            
            else
            {
            minhp.pop();
            ans.push_back(minhp.top());  
            }
            
        }
        
        return ans;
    }
};
