Time Complexity: O(N*LogK)
Space Complexity: O(K)

class Solution {
  public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) 
    {
        // Your code here
        vector<vector<int>> ans;
        
        priority_queue <pair<int,pair<int,int>>> maxx;
        // {dist,{x,y}}
        
        for(int i=0;i<points.size();i++)
        {
            maxx.push({(points[i][0]*points[i][0])+(points[i][1]*points[i][1]),
            {points[i][0],points[i][1]}});
            
            if(maxx.size()>k) maxx.pop();
        }
        
        while(!maxx.empty())
        {
            ans.push_back({maxx.top().second.first,maxx.top().second.second});
            maxx.pop();
        }
        
        return ans;
    }
};

